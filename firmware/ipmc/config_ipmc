#!/usr/bin/python
#-----------------------------------------------------------------------------
# File       : config_ipmc
# Created    : 2017-08-21
# Last update: 2017-08-21
#-----------------------------------------------------------------------------
# Description: 
#-----------------------------------------------------------------------------
# This file is part of the 'amc-carrier-init'. It is subject to 
# the license terms in the LICENSE.txt file found in the top-level directory 
# of this distribution and at: 
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html. 
# No part of the 'amc-carrier-init', including this file, may be 
# copied, modified, propagated, or distributed except according to the terms 
# contained in the LICENSE.txt file.
#-----------------------------------------------------------------------------

import sys
import os
import re
import collections
import string
import subprocess
import commands
import argparse
import time

# Function for checking value MAC address string
def checkMAC(s):
    allchars = "".join(chr(a) for a in range(256))
    delchars = set(allchars) - set(string.hexdigits)
    mac = s.translate("".join(allchars),"".join(delchars))
    if len(mac) != 12:
        raise ValueError, "Ethernet MACs are always 12 hex characters, you entered %s" % mac 
    return mac.upper()
 
# Set the argument parser
parser = argparse.ArgumentParser()

# Add arguments
parser.add_argument(
    "--ip", 
    type    = str,
    required= True,
    help    = "Shelf managers IP address",
)

parser.add_argument(
    "--mac0", 
    type=str,
    required=True,
    help="MAC[0] Address",
)

parser.add_argument(
    "--mac1", 
    type=str,
    required=True,
    help="MAC[1] Address",
)

parser.add_argument(
    "--mac2", 
    type=str,
    required=True,
    help="MAC[2] Address",
)

parser.add_argument(
    "--mac3", 
    type=str,
    required=True,
    help="MAC[3] Address",
)

parser.add_argument(
    "--fru", 
    type=str,
    required=True,
    help="path to FRU (.BIN) file",
)

parser.add_argument(
    "--tag", 
    type=str,
    required=True,
    help="Product Asset Tag",
)

# Get the arguments
args     = parser.parse_args()

# Set the constants
slot     = 2
bootAddr = "0x04000000"
fruName  = os.path.splitext(os.path.basename(args.fru))[0].lower()

# Make a list out of the MAC address arguments 
macList = [args.mac0,args.mac1,args.mac2,args.mac3]

# Check FRU's file extension 
if ( not args.fru.endswith('.bin') ):
    raise ValueError, "Invalid file extension (%s).  Should be .bin file extension." % (args.fru)

# Load the MAC addresses
for i in range(len(macList)): 
    # Check for valid MAC address
    checkMAC(macList[i])
    # Set the value
    subprocess.check_call( ( "amcc_mac_adx --set %s/%d %d %s" % (args.ip,slot,i,macList[i]) ) , shell=True)
    time.sleep(0.1)
    # Get the value
    retVar = commands.getstatusoutput("amcc_mac_adx --get %s/%d %d" % (args.ip,slot,i))
    time.sleep(0.1)
    print ( retVar[1] )
    if ( macList[i].lower() not in retVar[1]): 
        raise ValueError, "Invalid to verify MAC Address. Should be %s, but %s" % (macList[i].lower(), retVar[1])
    # Commit the value to the IPMC PROM
    subprocess.check_call( "amcc_mac_adx --commit  %s/%d %d" % (args.ip,slot,i)  , shell=True)
    time.sleep(0.1)
    
# Load the bootloader value
subprocess.check_call( ( "amcc_bootloader --set %s/%d %s" % (args.ip,slot,bootAddr) ) , shell=True)
time.sleep(0.1)
# Get the value
retVar = commands.getstatusoutput("amcc_bootloader --get %s/%d" % (args.ip,slot))
time.sleep(0.1)
print ( retVar[1] )
if ( bootAddr.lower() not in retVar[1]): 
    raise ValueError, "Invalid to verify bootloader Address. Should be %s, but %s" % (bootAddr.lower(), retVar[1])
# Commit the value to the IPMC PROM
subprocess.check_call( "amcc_bootloader --commit  %s/%d" % (args.ip,slot)  , shell=True)    
time.sleep(0.1)
    
# Load the FRU file
subprocess.check_call( ( "cba_fru_init -s %s/%d -f %s --tag %s" % (args.ip,slot,args.fru,args.tag) ) , shell=True)
time.sleep(0.1)

subprocess.check_call( ("bash set_threholds.bash -s %s -n %d" % (args.ip,slot) ) , shell=True)
time.sleep(0.1)

# Get the value
retVar = commands.getstatusoutput("cba_fru_init -d %s/%d" % (args.ip,slot))
time.sleep(0.1)
print ( retVar[1] )
if ( fruName not in retVar[1]): 
    raise ValueError, "Invalid FRU detected.  Does not match with FRU's filename" % (fruName, retVar[1])
    

# Print that the configuration of IPMC passed.
# subprocess.check_call( ( "amcc_dump_bsi --all %s/%d" % (args.ip,slot) ) , shell=True)   
# subprocess.check_call( ( "cba_cold_data_reset %s/%d" % (args.ip,slot) ) , shell=True)   
print ( "\nSUCESSFULLY LOADED IPMC CONFIGURATION!\n" )
